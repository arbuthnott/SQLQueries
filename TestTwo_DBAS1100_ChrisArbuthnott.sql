/* TEST TWO, DBAS 1100 - 700
CHRIS ARBUTHNOTT, W0276812
MARCH 30TH 2015 */

--1. Album titles in alphabetical, with artist id 22
SELECT Title FROM ALBUM
WHERE ARTISTID=22
ORDER BY TITLE;

--2. Album titles containing word "Best"
SELECT TITLE FROM ALBUM
WHERE UPPER(TITLE) LIKE '%BEST%';

--3. Songs with Alternative genre, no composer.
SELECT NAME FROM TRACK
WHERE (COMPOSER IS NULL) AND GENREID IN (
  SELECT GENREID FROM GENRE
  WHERE UPPER(NAME) = 'ALTERNATIVE'
)
ORDER BY NAME;

--4. List employees hired less than twelve years ago and who are older than 50.
SELECT FIRSTNAME, LASTNAME, BIRTHDATE, HIREDATE FROM EMPLOYEE
WHERE (SYSDATE - HIREDATE < 12*365)
  AND (SYSDATE - BIRTHDATE > 50*365);

--5. Name and Email of all customers with steve johnson as support rep.
  -- order by last name, first name.
SELECT FIRSTNAME, LASTNAME, EMAIL FROM CUSTOMER
WHERE SUPPORTREPID = (
  SELECT EMPLOYEEID FROM EMPLOYEE WHERE FIRSTNAME='Steve' AND LASTNAME='Johnson'
  )
ORDER BY LASTNAME, FIRSTNAME;
  
--6. Return tracks that start with 'A' or end with 't'.
SELECT DISTINCT NAME FROM TRACK
WHERE NAME LIKE 'A%' OR NAME LIKE '%t'
ORDER BY NAME DESC;

--7. Highest num of albums from single artist
SELECT * FROM (
  SELECT ARTISTID, COUNT(ALBUMID) AS "Album Count" FROM ALBUM
  GROUP BY ARTISTID
)
WHERE "Album Count" = (
  SELECT MAX("Album Count") FROM (
    SELECT ARTISTID, COUNT(ALBUMID) AS "Album Count" FROM ALBUM
    GROUP BY ARTISTID
  )
);

--8. List customerid and number of orders placed.  modify to display if total is more
  --than $40.  Sort high to low total, then customerid high to low.
SELECT CUSTOMER.CUSTOMERID, COUNT(INVOICE.INVOICEID) AS "Orders Placed",
  SUM(INVOICE.TOTAL) AS "Total Cost"
FROM CUSTOMER INNER JOIN INVOICE ON INVOICE.CUSTOMERID=CUSTOMER.CUSTOMERID
GROUP BY CUSTOMER.CUSTOMERID
HAVING SUM(INVOICE.TOTAL) > 40
ORDER BY SUM(INVOICE.TOTAL) DESC, CUSTOMERID DESC
;

--9. Invoiceid and total number of items sold.  Sort by number sold high to low,
  -- invoiceid low to high.
SELECT INV.INVOICEID, SUM(INVLIN.QUANTITY)
FROM INVOICE INV INNER JOIN INVOICELINE INVLIN ON INVLIN.INVOICEID=INV.INVOICEID
GROUP BY INV.INVOICEID
ORDER BY SUM(INVLIN.QUANTITY) DESC, INVOICEID;

--10. Customers with invoices totaling over $5 and affiliated with a company
SELECT DISTINCT CUSTOMER.CUSTOMERID FROM CUSTOMER INNER JOIN INVOICE
  ON INVOICE.CUSTOMERID=CUSTOMER.CUSTOMERID
WHERE (CUSTOMER.COMPANY IS NOT NULL) AND (INVOICE.TOTAL > 5)
ORDER BY CUSTOMER.CUSTOMERID;

--11. Albumid and track count for albums containing more than 25 tracks.
  -- sort by track count high to low
SELECT ALB.ALBUMID, COUNT(TRK.TRACKID) AS "Track Count"
FROM ALBUM ALB INNER JOIN TRACK TRK ON TRK.ALBUMID=ALB.ALBUMID
GROUP BY ALB.ALBUMID
HAVING COUNT(TRK.TRACKID) > 25
ORDER BY COUNT(TRK.TRACKID) DESC;

--12. Return the names of the songs in the playlist with id 17.  Sort alphabetically
SELECT TRK.NAME
FROM TRACK TRK INNER JOIN PLAYLISTTRACK PLYTRK ON PLYTRK.TRACKID=TRK.TRACKID
  INNER JOIN PLAYLIST PLY ON PLYTRK.PLAYLISTID=PLY.PLAYLISTID
WHERE PLY.PLAYLISTID=17
ORDER BY TRK.NAME;

--13. Only list playlist ids of those with more than 100 tracks.  Sort from largest
  -- to smallest track counts
SELECT PLY.PLAYLISTID, COUNT(TRK.TRACKID) AS "Track Count"
FROM PLAYLIST PLY INNER JOIN PLAYLISTTRACK PLYTRK ON PLYTRK.PLAYLISTID=PLY.PLAYLISTID
  INNER JOIN TRACK TRK ON PLYTRK.TRACKID=TRK.TRACKID
GROUP BY PLY.PLAYLISTID
HAVING COUNT(TRK.TRACKID) > 100
ORDER BY "Track Count" DESC;

--14. Display the total number of tracks that have not been purchased.
SELECT COUNT(TRACKID) AS "Number of unpurchased tracks" FROM (
  SELECT TRACKID FROM TRACK WHERE (
    TRACKID NOT IN (SELECT DISTINCT TRACKID FROM INVOICELINE)
  )
);

--15. List all playlist ids for playlists containing Stairway to Heaven.
  -- List in ascending order
SELECT DISTINCT PLYTRK.PLAYLISTID
FROM PLAYLISTTRACK PLYTRK INNER JOIN TRACK TRK ON PLYTRK.TRACKID=TRK.TRACKID
WHERE TRK.NAME = 'Stairway To Heaven'
ORDER BY PLYTRK.PLAYLISTID;

--END TEST - HOORAY!